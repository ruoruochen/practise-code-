{"version":3,"sources":["../src/async-principle.js"],"names":["myAsyncTest","Promise","resolve","reject","setTimeout","console","log","spawn","GeneratorFn","gen","step","nextFn","next","error","done","value","then","res","catch","e","throw","undefined","myAsyncTest2"],"mappings":"AAAA,eAAeA,WAAf,GAA6B;AACzB,UAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AAChCC,mBAAW,MAAI;AACXC,oBAAQC,GAAR,CAAY,MAAZ;AACAJ,oBAAQ,MAAR;AAAgB,SAFpB,EAGC,IAHD;AAIH,KALK,CAAN;;AAOA,UAAM,IAAID,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AAChCC,mBAAW,MAAI;AACXC,oBAAQC,GAAR,CAAY,MAAZ;AACAJ,oBAAQ,MAAR;AACH,SAHD,EAGE,IAHF;AAIH,KALK,CAAN;AAMH;;AAEDF;;AAGA;;;;;;;;;;;;;;;;;AAiBA;AACA,SAASO,KAAT,CAAeC,WAAf,EAA2B;AACvB,WAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AACjC,cAAMM,MAAMD,aAAZ;AACAH,gBAAQC,GAAR,CAAYG,GAAZ,EAAgB,OAAOA,GAAvB;AACA,cAAMC,OAAQC,MAAD,IAAU;AACnB,gBAAIC,IAAJ;AACA,gBAAI;AACCA,uBAAOD,QAAP;AACJ,aAFD,CAEE,OAAOE,KAAP,EAAc;AACZ,uBAAOV,OAAOU,KAAP,CAAP;AACH;;AAED,gBAAGD,KAAKE,IAAR,EAAa;AACT,uBAAOZ,QAAQU,KAAKG,KAAb,CAAP;AACH;;AAEDd,oBAAQC,OAAR,CAAgBU,KAAKG,KAArB,EAA4BC,IAA5B,CAAiCC,OAAK;AAACP,qBAAK,MAAI;AAAC,2BAAOD,IAAIG,IAAJ,CAASK,GAAT,CAAP;AAAqB,iBAA/B;AAAiC,aAAxE,EAA0EC,KAA1E,CAAgFC,KAAG;AAACT,qBAAK,MAAI;AAAC,2BAAOD,IAAIW,KAAJ,CAAUD,CAAV,CAAP;AAAoB,iBAA9B;AAAgC,aAApH;AACH,SAbD;;AAeA;AACAT,aAAK,MAAI;AACN,mBAAOD,IAAIG,IAAJ,CAASS,SAAT,CAAP;AACF,SAFD;AAGH,KAtBM,CAAP;AAuBH;;AAED,UAAUC,YAAV,GAAwB;AACpB,UAAM,IAAIrB,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AAChCC,mBAAW,MAAI;AACXC,oBAAQC,GAAR,CAAY,MAAZ;AACAJ,oBAAQ,MAAR;AAAgB,SAFpB,EAGC,IAHD;AAIH,KALK,CAAN;;AAOA,UAAM,IAAID,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AAChCC,mBAAW,MAAI;AACXC,oBAAQC,GAAR,CAAY,MAAZ;AACAJ,oBAAQ,MAAR;AACH,SAHD,EAGE,IAHF;AAIH,KALK,CAAN;AAOF;;AAEFK,MAAMe,YAAN","file":"async-principle.js","sourcesContent":["async function myAsyncTest (){\n    await new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            console.log('2000');\n            resolve('2000')}\n        ,2000)\n    })\n\n    await new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            console.log('5000'); \n            resolve('5000');\n        },5000)\n    })\n}\n\nmyAsyncTest();\n\n\n/**  async 是generator函数的语法糖，即generator函数自执行\n * \n *  等同于以下代码\n *  spawn(myAsyncTest);\n * \n *  function * myAsyncTest(){\n *      yield new...\n *      yield new...\n *      \n * }\n * \n * // 自执行函数\n * return spawn(myAsyncTest){\n *          \n * }\n */\n\n// async函数实现原理\nfunction spawn(GeneratorFn){\n    return new Promise((resolve,reject)=>{\n        const gen = GeneratorFn();\n        console.log(gen,typeof gen)\n        const step = (nextFn)=>{\n            let next;\n            try {\n                 next = nextFn();\n            } catch (error) {\n                return reject(error);\n            }\n\n            if(next.done){\n                return resolve(next.value);\n            }\n\n            Promise.resolve(next.value).then(res=>{step(()=>{return gen.next(res)})}).catch(e=>{step(()=>{return gen.throw(e)})})\n        }\n\n        // 开始执行\n        step(()=>{\n           return gen.next(undefined);\n        })\n    })\n}\n\nfunction* myAsyncTest2(){\n    yield new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            console.log('2000');\n            resolve('2000')}\n        ,2000)\n    })\n\n    yield new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            console.log('5000'); \n            resolve('5000');\n        },5000)\n    })\n      \n }\n\nspawn(myAsyncTest2);\n"]}